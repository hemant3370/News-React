{"version":3,"sources":["logo.svg","FeedItem/FeedList.js","Hospitals/HDirectory.js","App.js","registerServiceWorker.js","Test.js","index.js"],"names":["module","exports","__webpack_require__","p","RSSParser","require","FeedList","state","feed","loading","this","fetchFeed","props","url","nextProps","console","log","self","setState","parseURL","err","rssfeed","undefined","items","_this$state","react_default","a","createElement","spin","tip","list","itemLayout","size","pagination","onChange","page","pageSize","dataSource","renderItem","item","Item","card","extra","target","href","link","title","renderHTML","content","Component","Column","Table","SubMenu","ColumnGroup","Menu","Header","Layout","Content","App","Sider","Comics","Buttersafe","Oglaf","SMBC","What If","XKCD","Entertainment","BBC","CNN","Hindu","Quora","Reuters","W Post","Health","Politics","NPR","RC Politics","RCP","Science","Sports","World","_this2","categories","Object","keys","channels","values","className","layout","menu","theme","mode","map","cat","index","key","channel","onClick","style","padding","background","margin","minHeight","FeedItem_FeedList","isLocalhost","React","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.eaaddc3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { message, List, Avatar, Icon, Card, Spin } from 'antd';\nimport renderHTML from 'react-render-html';\n\nconst RSSParser = require('rss-parser');\nconst IconText = ({ type, text }) => (\n    <span>\n      <Icon type={type} style={{ marginRight: 8 }} />\n      {text}\n    </span>\n  );\n\nclass FeedList extends Component {\n  state = {\n    feed: [],\n    loading: true\n  };\n  componentDidMount(){\n    this.fetchFeed(this.props.url);\n  }\n  componentWillReceiveProps(nextProps){\n    console.log(\"New Props\", nextProps);\n    this.fetchFeed(nextProps.url);\n  }\n  fetchFeed(url){\n    let self = this;\n    self.setState({ feed: [], loading: true });\n    const CORS_PROXY = \"https://getrssfeed-mm5zus754q-uc.a.run.app?url=\"\n    let parser = new RSSParser();\n    parser.parseURL(url, function(err, rssfeed) {\n     if (rssfeed !== undefined) {\n       console.log(\"Feed\", rssfeed);\n        self.setState({ feed: rssfeed.items, loading: false });\n     }\n})\n  }\n  render() {\n      const { feed, loading } = this.state;\n      const view = loading ? <Spin tip=\"Loading...\"> </Spin> : <List\n      itemLayout=\"vertical\"\n      size=\"large\"\n      pagination={{\n        onChange: (page) => {\n          console.log(page);\n        },\n        pageSize: 10,\n      }}\n      dataSource={feed}\n      renderItem={item => (\n          <List.Item>\n            <Card \n            extra={<a target=\"_blank\" href={item.link}>Full Story</a>}\n            title={item.title}>{renderHTML(item.content)}</Card>\n          </List.Item>\n        )}\n    />;\n    return (\n      view\n    );\n}\n}\nexport default FeedList;","import React, { Component } from 'react';\nimport { Table, Divider, Tag } from 'antd';\n\nconst { Column, ColumnGroup } = Table;\n\nconst dataUrl = \"https://api.data.gov.in/resource/98fa254e-c5f8-4910-a19b-4828939b477d?api-key=579b464db66ec23bdd00000199230f51e148472049284df3dd2e95c8&format=json&offset=0&limit=100\";\nclass HDirectory extends Component {\n  state = {\n    hospitals: [],\n    loading: true\n  };\n  componentDidMount(){\n    let self = this;\n    fetch(dataUrl, {\n      method: 'GET'\n    })\n    .then(response => response.json())\n    .catch(error => console.log(error))\n    .then(json => self.setState({ hospitals: json.records, loading: false }))\n  }\n  \n  render() {\n      const { hospitals, loading } = this.state;\n    return (\n        <Table dataSource={hospitals} loading={loading} bordered>\n      <Column\n        title=\"Hospital Name\"\n        dataIndex=\"hospital_name\"\n        key=\"hospital_name\"\n      />\n      <Column\n        title=\"Location\"\n        key=\"_location\"\n        render={(text, record) => (\n            <span>\n              {record._location}, {record.district}, {record.state} \n            </span>\n          )}\n      />\n    <Column\n      title=\"Action\"\n      key=\"action\"\n      render={(text, record) => (\n        <span>\n          <a href={\"https://www.google.com/maps/?q=\" + record._location_coordinates} target=\"_blank\">View on Map</a>\n          <Divider type=\"vertical\" />\n          <a href= {\"tel:\" + record.mobile_number}>Call {record.mobile_number}</a>\n        </span>\n      )}\n    />\n  </Table>\n    );\n  }\n}\n\nexport default HDirectory;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nimport FeedList from './FeedItem/FeedList';\nimport HDirectory from './Hospitals/HDirectory';\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\nclass App extends Component {\n  state = {\n    feed: {\n      \"Comics\": {\n        \"Buttersafe\": \"http://feeds.feedburner.com/Buttersafe?format=xml\",\n        \"Oglaf\": \"http://oglaf.com/feeds/rss/\",\n        \"SMBC\": \"http://www.smbc-comics.com/rss.php\",\n        \"What If\": \"https://what-if.xkcd.com/feed.atom\",\n        \"XKCD\": \"https://xkcd.com/atom.xml\"\n      },\n      \"Entertainment\": {\n        \"BBC\": \"http://feeds.bbci.co.uk/news/entertainment_and_arts/rss.xml\",\n        \"CNN\": \"http://rss.cnn.com/rss/edition_entertainment.rss\",\n        \"Hindu\": \"http://www.thehindu.com/entertainment/?service=rss\",\n        \"Quora\": \"https://www.quora.com/topic/Entertainment/rss\",\n        \"Reuters\": \"http://feeds.reuters.com/reuters/entertainment\",\n        \"W Post\": \"http://feeds.washingtonpost.com/rss/entertainment\"\n      },\n      \"Health\": {\n        \"BBC\": \"http://feeds.bbci.co.uk/news/health/rss.xml\",\n        \"Health\": \"http://www.health.com/health/diet-fitness/feed\",\n        \"Hindu\": \"http://www.thehindu.com/sci-tech/health/?service=rss\",\n        \"Quora\": \"https://www.quora.com/topic/Health/rss\",\n        \"Reuters\": \"http://feeds.reuters.com/reuters/healthNews\",\n        \"W Post\": \"http://feeds.washingtonpost.com/rss/rss_to-your-health\"\n      },\n      \"Politics\": {\n        \"BBC\": \"http://feeds.bbci.co.uk/news/politics/rss.xml\",\n        \"NPR\": \"http://www.npr.org/rss/rss.php?id=1012\",\n        \"RC Politics\": \"http://www.realclearpolitics.com/index.xml\",\n        \"RCP\": \"http://feeds.feedburner.com/realclearpolitics/qlMj\",\n        \"Reuters\": \"http://feeds.reuters.com/Reuters/PoliticsNews\",\n        \"W Post\": \"http://feeds.washingtonpost.com/rss/politics\"\n      },\n      \"Science\": {\n        \"BBC\": \"http://feeds.bbci.co.uk/news/science_and_environment/rss.xml\",\n        \"CNN\": \"http://rss.cnn.com/rss/edition_space.rss\",\n        \"Hindu\": \"http://www.thehindu.com/sci-tech/?service=rss\",\n        \"Quora\": \"https://www.quora.com/topic/Science/rss\",\n        \"Reuters\": \"http://feeds.reuters.com/reuters/scienceNews\",\n        \"W Post\": \"http://feeds.washingtonpost.com/rss/rss_speaking-of-science\"\n      },\n      \"Sports\": {\n        \"BBC\": \"http://newsrss.bbc.co.uk/rss/sportonline_uk_edition/front_page/rss.xml\",\n        \"CNN\": \"http://rss.cnn.com/rss/edition_sport.rss\",\n        \"Hindu\": \"http://www.thehindu.com/sport/?service=rss\",\n        \"Quora\": \"https://www.quora.com/topic/Sports/rss\",\n        \"Reuters\": \"http://feeds.reuters.com/reuters/sportsNews\",\n        \"W Post\": \"http://feeds.washingtonpost.com/rss/sports\"\n      },\n      \"World\": {\n        \"BBC\": \"http://feeds.bbci.co.uk/news/world/rss.xml\",\n        \"CNN\": \"http://rss.cnn.com/rss/edition_world.rss\",\n        \"Hindu\": \"http://www.thehindu.com/news/international/world/?service=rss\",\n        \"NPR\": \"http://www.npr.org/rss/rss.php\",\n        \"Reuters\": \"http://feeds.reuters.com/reuters/INworldNews\",\n        \"W Post\": \"http://feeds.washingtonpost.com/rss/world\"\n      }\n    },\n    url: 'http://feeds.feedburner.com/Buttersafe?format=xml'\n  }\n  \n  render() {\n    const categories = Object.keys(this.state.feed);\n    const channels = Object.values(this.state.feed);\n    console.log(this.state.url);\n    return (\n      <div className=\"App\">\n      <Layout>\n    <Header className=\"header\">\n    <Menu\n    theme=\"dark\"\n        mode=\"horizontal\"\n      >\n       {categories.map((cat, index) => {\n          return (\n            <SubMenu key={cat+index} title={cat}>\n          {Object.keys(channels[index]).map(channel => {\n  return (\n    <Menu.Item key={cat+channel} onClick={() => { this.setState({url: Object.values(channels)[index][channel] })}}>{channel}</Menu.Item>\n  );\n})}\n        </SubMenu>\n          );\n        })}\n      </Menu>\n    </Header>\n    <Layout>\n      <Layout style={{ padding: '0 24px 24px' }}>\n        <Content style={{ background: '#fff', padding: 24, margin: 0, minHeight: 280 }}>\n        <FeedList url={this.state.url}/>\n        </Content>\n      </Layout>\n    </Layout>\n  </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nexport default class Test extends React.Component {\n  \n    constructor() {\n      super(); \n      this.name = 'MyComponent';\n      \n      this.handleClick2 = this.handleClick1.bind(this);\n    }\n    \n    handleClick1() {\n      alert(this.name);\n    }\n    \n    handleClick3 = () => alert(this.name);\n  render() {\n      return (\n        <div>\n          <button onClick={this.handleClick1()}>click 1</button>\n          <button onClick={this.handleClick1}>click 2</button>\n          <button onClick={this.handleClick2}>click 3</button>\n          <button onClick={this.handleClick3}>click 4</button>\n        </div>\n      );\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Test from './Test';\nimport HDirectory from './Hospitals/HDirectory';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'rss-parser/dist/rss-parser.min.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}